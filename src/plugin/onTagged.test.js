// Copyright (c) 2022 James Reid. All rights reserved.
//
// This source code file is licensed under the terms of the MIT license, a copy
// of which may be found in the LICENSE.md file in the root of this repository.  
// 
// For a template copy of the license see one of the following 3rd party sites:
//      * <https://opensource.org/licenses/MIT>
//      * <https://choosealicense.com/licenses/mit>
//      * <https://spdx.org/licenses/MIT>

// @ts-check

// @import-module
import { onTagged } from "./onTagged.js"
// @import-types
import { describe, test, expect } from "@jest/globals"

// @body
describe("onTagged", () => {
    // default access and scope values use by onTagged function
    // const [defaultAccess, defaultScope] = ["public", "instance"]
    // { pwd, conf: { submodule, source } }
    // const 
    global.env = {
        pwd: process.cwd(),
        conf: {
            submodule: {
                roots: {
                    "customA": "src/submoduleA",
                    "customB": "src/submoduleB",
                    "nested": "src/submoduleB/nested"
                }
            },
            source: { include: ["src"] }
        }
    }

    /**
     * Mock fragment of doclet which should be generated by onTagged function
     * 
     * @param {string} name - expected path/name of created module
     * @returns {{kind: string, name: string}}
     */
    const getDoclet = name => {
        return { kind: "module", name }
    }

    /**
     * Mock fragment of jsdoc tag required by onTagged function
     *
     * @param {?string} name - custom name provided in submodule tag
     * @returns {{value: {name: string}}|{}}
     */
    const getTag = (name = null) => { 
        return name ? { value: { name } } : {}
    }

    // test non-default valid access and scope strings "@funky {private|inner}"
    // test("valid type", () => {
    //     let doclet = { meta: { path: "", filename: "" }}
    //     const [access, scope] = ["private", "inner"]
    //     onTagged(doclet, getTag(access, scope))
    //     expect(doclet).toEqual(getDoclet(access, scope))
    // })

    test("standard", () => {
        let doclet = {}
        const name = ""
        onTagged(doclet, getTag())
        expect(doclet).toEqual(getDoclet(name))
    })

    test("custom basename in tag", () => {
        
    })

    test("custom module name in tag", () => {
        
    })

    test("no submodule roots", () => {
        
    })

    test("custom submodule nullBases", () => {
        
    })

    test("multiple jsdoc source includes", () => {
        
    })
})